#[derive(PartialEq, Debug)]
pub enum Token {
  ILLEGAL,
  EOF,
  IDENT(String),
  INT(Vec<char>),
  ASSIGN(char),
  PLUS(char),
  COMMA(char),
  SEMICOLON(char),
  COLON(char),
  LPAREN(char),
  RPAREN(char),
  LBRACE(char),
  RBRACE(char),
  IMPORT,
  EXPORT,
  FROM,
  FUNCTION,
  LET,
  CONST,
  TRUE,
  FALSE,
  IF,
  ELSE,
  RETURN,
  MINUS(char),
  BANG(char),
  ASTERISK(char),
  SLASH(char),
  LT(char),
  GT(char),
  QUOT(char),
  APOS(char),
  DOT(char),
}

pub fn get_keyword_token(ident: &String) -> Result<Token, String> {
  match &ident[..] {
    "import" => Ok(Token::IMPORT),
    "export" => Ok(Token::EXPORT),
    "from" => Ok(Token::FROM),
    "function" => Ok(Token::FUNCTION),
    "let" => Ok(Token::LET),
    "const" => Ok(Token::CONST),
    "true" => Ok(Token::TRUE),
    "false" => Ok(Token::FALSE),
    "if" => Ok(Token::IF),
    "else" => Ok(Token::ELSE),
    "return" => Ok(Token::RETURN),
    _ => Err(String::from("Not a keyword")),
  }
}
